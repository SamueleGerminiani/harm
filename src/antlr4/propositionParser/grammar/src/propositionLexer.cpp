
// Generated from proposition.g4 by ANTLR 4.10.1


#include "propositionLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct PropositionLexerStaticData final {
  PropositionLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PropositionLexerStaticData(const PropositionLexerStaticData&) = delete;
  PropositionLexerStaticData(PropositionLexerStaticData&&) = delete;
  PropositionLexerStaticData& operator=(const PropositionLexerStaticData&) = delete;
  PropositionLexerStaticData& operator=(PropositionLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag propositionlexerLexerOnceFlag;
PropositionLexerStaticData *propositionlexerLexerStaticData = nullptr;

void propositionlexerLexerInitialize() {
  assert(propositionlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<PropositionLexerStaticData>(
    std::vector<std::string>{
      "BOOLEAN_CONSTANT", "BOOLEAN_VARIABLE", "INT_VARIABLE", "CONST_SUFFIX", 
      "FLOAT_CONSTANT", "FLOAT_VARIABLE", "LCURLY", "RCURLY", "LSQUARED", 
      "RSQUARED", "LROUND", "RROUND", "INSIDE", "FUNCTION", "VARIABLE", 
      "VALID_ID_START", "VALID_ID_CHAR", "SINTEGER", "UINTEGER", "FLOAT", 
      "GCC_BINARY", "HEX", "VERILOG_BINARY", "FVL", "SINGLE_QUOTE", "START_VAR", 
      "END_VAR", "PLUS", "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", 
      "EQ", "NEQ", "BAND", "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", "AND", 
      "OR", "NOT", "COL", "DCOL", "DOLLAR", "RANGE", "CLS_TYPE", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "'{'", "'}'", "'['", "']'", "'('", "')'", 
      "'inside'", "", "", "", "", "", "", "", "", "'''", "'+'", "'-'", "'*'", 
      "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'&'", "'|'", 
      "'^'", "'~'", "'<<'", "'>>'", "'&&'", "'||'", "'!'", "':'", "'::'", 
      "'$'", "'><'"
    },
    std::vector<std::string>{
      "", "BOOLEAN_CONSTANT", "BOOLEAN_VARIABLE", "INT_VARIABLE", "CONST_SUFFIX", 
      "FLOAT_CONSTANT", "FLOAT_VARIABLE", "LCURLY", "RCURLY", "LSQUARED", 
      "RSQUARED", "LROUND", "RROUND", "INSIDE", "FUNCTION", "SINTEGER", 
      "UINTEGER", "FLOAT", "GCC_BINARY", "HEX", "VERILOG_BINARY", "FVL", 
      "SINGLE_QUOTE", "PLUS", "MINUS", "TIMES", "DIV", "GT", "GE", "LT", 
      "LE", "EQ", "NEQ", "BAND", "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", 
      "AND", "OR", "NOT", "COL", "DCOL", "DOLLAR", "RANGE", "CLS_TYPE", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,47,353,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	3,0,117,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,143,8,3,1,4,1,4,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
  	1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,3,13,199,8,13,1,14,1,14,5,14,203,8,14,10,14,12,14,
  	206,9,14,1,15,3,15,209,8,15,1,16,3,16,212,8,16,1,17,1,17,4,17,216,8,17,
  	11,17,12,17,217,1,18,4,18,221,8,18,11,18,12,18,222,1,19,3,19,226,8,19,
  	1,19,4,19,229,8,19,11,19,12,19,230,1,19,1,19,4,19,235,8,19,11,19,12,19,
  	236,1,19,3,19,240,8,19,1,19,4,19,243,8,19,11,19,12,19,244,1,19,1,19,3,
  	19,249,8,19,1,20,1,20,1,20,1,20,4,20,255,8,20,11,20,12,20,256,1,21,1,
  	21,1,21,1,21,4,21,263,8,21,11,21,12,21,264,1,21,1,21,1,21,1,21,4,21,271,
  	8,21,11,21,12,21,272,3,21,275,8,21,1,22,1,22,1,22,1,23,1,23,4,23,282,
  	8,23,11,23,12,23,283,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
  	1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,
  	1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
  	1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,
  	1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,
  	1,51,1,51,0,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
  	23,12,25,13,27,14,29,0,31,0,33,0,35,15,37,16,39,17,41,18,43,19,45,20,
  	47,21,49,22,51,0,53,0,55,23,57,24,59,25,61,26,63,27,65,28,67,29,69,30,
  	71,31,73,32,75,33,77,34,79,35,81,36,83,37,85,38,87,39,89,40,91,41,93,
  	42,95,43,97,44,99,45,101,46,103,47,1,0,8,3,0,65,90,95,95,97,122,8,0,40,
  	41,46,46,48,58,65,91,93,93,95,95,97,123,125,125,2,0,48,57,97,102,2,0,
  	48,57,65,70,2,0,66,66,98,98,3,0,48,49,120,120,122,122,2,0,75,75,83,83,
  	3,0,9,10,13,13,32,32,366,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
  	0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
  	19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,35,1,
  	0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
  	0,0,47,1,0,0,0,0,49,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
  	61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
  	0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
  	0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
  	93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
  	1,0,0,0,1,116,1,0,0,0,3,118,1,0,0,0,5,128,1,0,0,0,7,142,1,0,0,0,9,144,
  	1,0,0,0,11,146,1,0,0,0,13,157,1,0,0,0,15,159,1,0,0,0,17,161,1,0,0,0,19,
  	163,1,0,0,0,21,165,1,0,0,0,23,167,1,0,0,0,25,169,1,0,0,0,27,198,1,0,0,
  	0,29,200,1,0,0,0,31,208,1,0,0,0,33,211,1,0,0,0,35,213,1,0,0,0,37,220,
  	1,0,0,0,39,248,1,0,0,0,41,250,1,0,0,0,43,274,1,0,0,0,45,276,1,0,0,0,47,
  	279,1,0,0,0,49,285,1,0,0,0,51,287,1,0,0,0,53,289,1,0,0,0,55,291,1,0,0,
  	0,57,293,1,0,0,0,59,295,1,0,0,0,61,297,1,0,0,0,63,299,1,0,0,0,65,301,
  	1,0,0,0,67,304,1,0,0,0,69,306,1,0,0,0,71,309,1,0,0,0,73,312,1,0,0,0,75,
  	315,1,0,0,0,77,317,1,0,0,0,79,319,1,0,0,0,81,321,1,0,0,0,83,323,1,0,0,
  	0,85,326,1,0,0,0,87,329,1,0,0,0,89,332,1,0,0,0,91,335,1,0,0,0,93,337,
  	1,0,0,0,95,339,1,0,0,0,97,342,1,0,0,0,99,344,1,0,0,0,101,347,1,0,0,0,
  	103,349,1,0,0,0,105,106,5,64,0,0,106,107,5,116,0,0,107,108,5,114,0,0,
  	108,109,5,117,0,0,109,117,5,101,0,0,110,111,5,64,0,0,111,112,5,102,0,
  	0,112,113,5,97,0,0,113,114,5,108,0,0,114,115,5,115,0,0,115,117,5,101,
  	0,0,116,105,1,0,0,0,116,110,1,0,0,0,117,2,1,0,0,0,118,119,3,51,25,0,119,
  	120,3,29,14,0,120,121,5,44,0,0,121,122,5,98,0,0,122,123,5,111,0,0,123,
  	124,5,111,0,0,124,125,5,108,0,0,125,126,1,0,0,0,126,127,3,53,26,0,127,
  	4,1,0,0,0,128,129,3,51,25,0,129,130,3,29,14,0,130,131,5,44,0,0,131,132,
  	5,105,0,0,132,133,5,110,0,0,133,134,5,116,0,0,134,135,1,0,0,0,135,136,
  	3,53,26,0,136,6,1,0,0,0,137,138,5,108,0,0,138,143,5,108,0,0,139,140,5,
  	117,0,0,140,141,5,108,0,0,141,143,5,108,0,0,142,137,1,0,0,0,142,139,1,
  	0,0,0,143,8,1,0,0,0,144,145,3,39,19,0,145,10,1,0,0,0,146,147,3,51,25,
  	0,147,148,3,29,14,0,148,149,5,44,0,0,149,150,5,102,0,0,150,151,5,108,
  	0,0,151,152,5,111,0,0,152,153,5,97,0,0,153,154,5,116,0,0,154,155,1,0,
  	0,0,155,156,3,53,26,0,156,12,1,0,0,0,157,158,5,123,0,0,158,14,1,0,0,0,
  	159,160,5,125,0,0,160,16,1,0,0,0,161,162,5,91,0,0,162,18,1,0,0,0,163,
  	164,5,93,0,0,164,20,1,0,0,0,165,166,5,40,0,0,166,22,1,0,0,0,167,168,5,
  	41,0,0,168,24,1,0,0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,172,5,115,
  	0,0,172,173,5,105,0,0,173,174,5,100,0,0,174,175,5,101,0,0,175,26,1,0,
  	0,0,176,177,5,36,0,0,177,178,5,115,0,0,178,179,5,116,0,0,179,180,5,97,
  	0,0,180,181,5,98,0,0,181,182,5,108,0,0,182,199,5,101,0,0,183,184,5,36,
  	0,0,184,185,5,112,0,0,185,186,5,97,0,0,186,187,5,115,0,0,187,199,5,116,
  	0,0,188,189,5,36,0,0,189,190,5,114,0,0,190,191,5,111,0,0,191,192,5,115,
  	0,0,192,199,5,101,0,0,193,194,5,36,0,0,194,195,5,102,0,0,195,196,5,101,
  	0,0,196,197,5,108,0,0,197,199,5,108,0,0,198,176,1,0,0,0,198,183,1,0,0,
  	0,198,188,1,0,0,0,198,193,1,0,0,0,199,28,1,0,0,0,200,204,3,31,15,0,201,
  	203,3,33,16,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,
  	1,0,0,0,205,30,1,0,0,0,206,204,1,0,0,0,207,209,7,0,0,0,208,207,1,0,0,
  	0,209,32,1,0,0,0,210,212,7,1,0,0,211,210,1,0,0,0,212,34,1,0,0,0,213,215,
  	5,45,0,0,214,216,2,48,57,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,
  	0,0,0,217,218,1,0,0,0,218,36,1,0,0,0,219,221,2,48,57,0,220,219,1,0,0,
  	0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,38,1,0,0,0,224,
  	226,5,45,0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,229,
  	2,48,57,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,
  	0,0,231,232,1,0,0,0,232,234,5,46,0,0,233,235,2,48,57,0,234,233,1,0,0,
  	0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,249,1,0,0,0,238,
  	240,5,45,0,0,239,238,1,0,0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,243,
  	2,48,57,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,
  	0,0,245,246,1,0,0,0,246,247,5,46,0,0,247,249,5,102,0,0,248,225,1,0,0,
  	0,248,239,1,0,0,0,249,40,1,0,0,0,250,251,5,48,0,0,251,252,5,98,0,0,252,
  	254,1,0,0,0,253,255,2,48,49,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,
  	1,0,0,0,256,257,1,0,0,0,257,42,1,0,0,0,258,259,5,48,0,0,259,260,5,120,
  	0,0,260,262,1,0,0,0,261,263,7,2,0,0,262,261,1,0,0,0,263,264,1,0,0,0,264,
  	262,1,0,0,0,264,265,1,0,0,0,265,275,1,0,0,0,266,267,5,48,0,0,267,268,
  	5,120,0,0,268,270,1,0,0,0,269,271,7,3,0,0,270,269,1,0,0,0,271,272,1,0,
  	0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,258,1,0,0,0,274,
  	266,1,0,0,0,275,44,1,0,0,0,276,277,3,49,24,0,277,278,3,47,23,0,278,46,
  	1,0,0,0,279,281,7,4,0,0,280,282,7,5,0,0,281,280,1,0,0,0,282,283,1,0,0,
  	0,283,281,1,0,0,0,283,284,1,0,0,0,284,48,1,0,0,0,285,286,5,39,0,0,286,
  	50,1,0,0,0,287,288,5,171,0,0,288,52,1,0,0,0,289,290,5,187,0,0,290,54,
  	1,0,0,0,291,292,5,43,0,0,292,56,1,0,0,0,293,294,5,45,0,0,294,58,1,0,0,
  	0,295,296,5,42,0,0,296,60,1,0,0,0,297,298,5,47,0,0,298,62,1,0,0,0,299,
  	300,5,62,0,0,300,64,1,0,0,0,301,302,5,62,0,0,302,303,5,61,0,0,303,66,
  	1,0,0,0,304,305,5,60,0,0,305,68,1,0,0,0,306,307,5,60,0,0,307,308,5,61,
  	0,0,308,70,1,0,0,0,309,310,5,61,0,0,310,311,5,61,0,0,311,72,1,0,0,0,312,
  	313,5,33,0,0,313,314,5,61,0,0,314,74,1,0,0,0,315,316,5,38,0,0,316,76,
  	1,0,0,0,317,318,5,124,0,0,318,78,1,0,0,0,319,320,5,94,0,0,320,80,1,0,
  	0,0,321,322,5,126,0,0,322,82,1,0,0,0,323,324,5,60,0,0,324,325,5,60,0,
  	0,325,84,1,0,0,0,326,327,5,62,0,0,327,328,5,62,0,0,328,86,1,0,0,0,329,
  	330,5,38,0,0,330,331,5,38,0,0,331,88,1,0,0,0,332,333,5,124,0,0,333,334,
  	5,124,0,0,334,90,1,0,0,0,335,336,5,33,0,0,336,92,1,0,0,0,337,338,5,58,
  	0,0,338,94,1,0,0,0,339,340,5,58,0,0,340,341,5,58,0,0,341,96,1,0,0,0,342,
  	343,5,36,0,0,343,98,1,0,0,0,344,345,5,62,0,0,345,346,5,60,0,0,346,100,
  	1,0,0,0,347,348,7,6,0,0,348,102,1,0,0,0,349,350,7,7,0,0,350,351,1,0,0,
  	0,351,352,6,51,0,0,352,104,1,0,0,0,22,0,116,142,198,204,208,211,217,222,
  	225,230,236,239,244,248,256,262,264,270,272,274,283,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  propositionlexerLexerStaticData = staticData.release();
}

}

propositionLexer::propositionLexer(CharStream *input) : Lexer(input) {
  propositionLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *propositionlexerLexerStaticData->atn, propositionlexerLexerStaticData->decisionToDFA, propositionlexerLexerStaticData->sharedContextCache);
}

propositionLexer::~propositionLexer() {
  delete _interpreter;
}

std::string propositionLexer::getGrammarFileName() const {
  return "proposition.g4";
}

const std::vector<std::string>& propositionLexer::getRuleNames() const {
  return propositionlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& propositionLexer::getChannelNames() const {
  return propositionlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& propositionLexer::getModeNames() const {
  return propositionlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& propositionLexer::getVocabulary() const {
  return propositionlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView propositionLexer::getSerializedATN() const {
  return propositionlexerLexerStaticData->serializedATN;
}

const atn::ATN& propositionLexer::getATN() const {
  return *propositionlexerLexerStaticData->atn;
}




void propositionLexer::initialize() {
  std::call_once(propositionlexerLexerOnceFlag, propositionlexerLexerInitialize);
}
