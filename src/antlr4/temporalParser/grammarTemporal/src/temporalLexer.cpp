
// Generated from temporal.g4 by ANTLR 4.10.1


#include "temporalLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TemporalLexerStaticData final {
  TemporalLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TemporalLexerStaticData(const TemporalLexerStaticData&) = delete;
  TemporalLexerStaticData(TemporalLexerStaticData&&) = delete;
  TemporalLexerStaticData& operator=(const TemporalLexerStaticData&) = delete;
  TemporalLexerStaticData& operator=(TemporalLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag temporallexerLexerOnceFlag;
TemporalLexerStaticData *temporallexerLexerStaticData = nullptr;

void temporallexerLexerInitialize() {
  assert(temporallexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<TemporalLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "PLACEHOLDER", "DT_AND", 
      "EVENTUALLY", "ALWAYS", "NEXT", "UNTIL", "RELEASE", "DOTS", "IMPL", 
      "IMPLO", "IFF", "SEREIMPL", "SEREIMPLO", "ASS", "DELAY", "SCOL", "FIRST_MATCH", 
      "TNOT", "TAND", "INTERSECT", "TOR", "BOOLEAN_CONSTANT", "BOOLEAN_VARIABLE", 
      "INT_VARIABLE", "CONST_SUFFIX", "FLOAT_CONSTANT", "FLOAT_VARIABLE", 
      "LCURLY", "RCURLY", "LSQUARED", "RSQUARED", "LROUND", "RROUND", "INSIDE", 
      "FUNCTION", "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", "SINTEGER", 
      "UINTEGER", "FLOAT", "GCC_BINARY", "HEX", "VERILOG_BINARY", "FVL", 
      "SINGLE_QUOTE", "START_VAR", "END_VAR", "PLUS", "MINUS", "TIMES", 
      "DIV", "GT", "GE", "LT", "LE", "EQ", "NEQ", "BAND", "BOR", "BXOR", 
      "NEG", "LSHIFT", "RSHIFT", "AND", "OR", "NOT", "COL", "DCOL", "DOLLAR", 
      "RANGE", "CLS_TYPE", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'assert property'", "'@posedge'", "'..##'", "'..#'", "'..['", 
      "']@'", "", "'..&&..'", "", "", "", "", "'R'", "'..'", "'=>'", "'->'", 
      "'<->'", "", "", "'='", "'##'", "';'", "'first_match'", "'not'", "'and'", 
      "'intersect'", "'or'", "", "", "", "", "", "", "'{'", "'}'", "'['", 
      "']'", "'('", "')'", "'inside'", "", "", "", "", "", "", "", "", "'''", 
      "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", 
      "'!='", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", "'&&'", "'||'", 
      "'!'", "':'", "'::'", "'$'", "'><'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "PLACEHOLDER", "DT_AND", "EVENTUALLY", 
      "ALWAYS", "NEXT", "UNTIL", "RELEASE", "DOTS", "IMPL", "IMPLO", "IFF", 
      "SEREIMPL", "SEREIMPLO", "ASS", "DELAY", "SCOL", "FIRST_MATCH", "TNOT", 
      "TAND", "INTERSECT", "TOR", "BOOLEAN_CONSTANT", "BOOLEAN_VARIABLE", 
      "INT_VARIABLE", "CONST_SUFFIX", "FLOAT_CONSTANT", "FLOAT_VARIABLE", 
      "LCURLY", "RCURLY", "LSQUARED", "RSQUARED", "LROUND", "RROUND", "INSIDE", 
      "FUNCTION", "SINTEGER", "UINTEGER", "FLOAT", "GCC_BINARY", "HEX", 
      "VERILOG_BINARY", "FVL", "SINGLE_QUOTE", "PLUS", "MINUS", "TIMES", 
      "DIV", "GT", "GE", "LT", "LE", "EQ", "NEQ", "BAND", "BOR", "BXOR", 
      "NEG", "LSHIFT", "RSHIFT", "AND", "OR", "NOT", "COL", "DCOL", "DOLLAR", 
      "RANGE", "CLS_TYPE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,74,576,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,
  	1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
  	7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,222,8,8,1,9,
  	1,9,1,9,1,9,1,9,1,9,1,9,3,9,231,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,3,10,246,8,10,1,11,1,11,1,11,1,11,1,11,
  	1,11,3,11,254,8,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,
  	1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,278,
  	8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,287,8,18,1,19,1,19,1,20,
  	1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,3,27,340,8,27,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,30,1,30,1,30,1,30,1,30,3,30,366,8,30,1,31,1,31,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
  	1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,3,40,422,8,40,1,41,1,41,5,41,426,8,41,10,
  	41,12,41,429,9,41,1,42,3,42,432,8,42,1,43,3,43,435,8,43,1,44,1,44,4,44,
  	439,8,44,11,44,12,44,440,1,45,4,45,444,8,45,11,45,12,45,445,1,46,3,46,
  	449,8,46,1,46,4,46,452,8,46,11,46,12,46,453,1,46,1,46,4,46,458,8,46,11,
  	46,12,46,459,1,46,3,46,463,8,46,1,46,4,46,466,8,46,11,46,12,46,467,1,
  	46,1,46,3,46,472,8,46,1,47,1,47,1,47,1,47,4,47,478,8,47,11,47,12,47,479,
  	1,48,1,48,1,48,1,48,4,48,486,8,48,11,48,12,48,487,1,48,1,48,1,48,1,48,
  	4,48,494,8,48,11,48,12,48,495,3,48,498,8,48,1,49,1,49,1,49,1,50,1,50,
  	4,50,505,8,50,11,50,12,50,506,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,
  	1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,61,
  	1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,
  	1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,
  	1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,77,1,77,
  	1,78,1,78,1,78,1,78,0,0,79,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
  	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,0,85,0,87,0,89,
  	42,91,43,93,44,95,45,97,46,99,47,101,48,103,49,105,0,107,0,109,50,111,
  	51,113,52,115,53,117,54,119,55,121,56,123,57,125,58,127,59,129,60,131,
  	61,133,62,135,63,137,64,139,65,141,66,143,67,145,68,147,69,149,70,151,
  	71,153,72,155,73,157,74,1,0,8,3,0,65,90,95,95,97,122,8,0,40,41,46,46,
  	48,58,65,91,93,93,95,95,97,123,125,125,2,0,48,57,97,102,2,0,48,57,65,
  	70,2,0,66,66,98,98,3,0,48,49,120,120,122,122,2,0,75,75,83,83,3,0,9,10,
  	13,13,32,32,596,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
  	0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
  	0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
  	31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
  	0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
  	0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
  	63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
  	0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,89,1,0,0,
  	0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,
  	101,1,0,0,0,0,103,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
  	115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,
  	125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
  	135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,
  	145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,
  	155,1,0,0,0,0,157,1,0,0,0,1,159,1,0,0,0,3,175,1,0,0,0,5,184,1,0,0,0,7,
  	189,1,0,0,0,9,193,1,0,0,0,11,197,1,0,0,0,13,200,1,0,0,0,15,203,1,0,0,
  	0,17,221,1,0,0,0,19,230,1,0,0,0,21,245,1,0,0,0,23,253,1,0,0,0,25,255,
  	1,0,0,0,27,257,1,0,0,0,29,260,1,0,0,0,31,263,1,0,0,0,33,266,1,0,0,0,35,
  	277,1,0,0,0,37,286,1,0,0,0,39,288,1,0,0,0,41,290,1,0,0,0,43,293,1,0,0,
  	0,45,295,1,0,0,0,47,307,1,0,0,0,49,311,1,0,0,0,51,315,1,0,0,0,53,325,
  	1,0,0,0,55,339,1,0,0,0,57,341,1,0,0,0,59,351,1,0,0,0,61,365,1,0,0,0,63,
  	367,1,0,0,0,65,369,1,0,0,0,67,380,1,0,0,0,69,382,1,0,0,0,71,384,1,0,0,
  	0,73,386,1,0,0,0,75,388,1,0,0,0,77,390,1,0,0,0,79,392,1,0,0,0,81,421,
  	1,0,0,0,83,423,1,0,0,0,85,431,1,0,0,0,87,434,1,0,0,0,89,436,1,0,0,0,91,
  	443,1,0,0,0,93,471,1,0,0,0,95,473,1,0,0,0,97,497,1,0,0,0,99,499,1,0,0,
  	0,101,502,1,0,0,0,103,508,1,0,0,0,105,510,1,0,0,0,107,512,1,0,0,0,109,
  	514,1,0,0,0,111,516,1,0,0,0,113,518,1,0,0,0,115,520,1,0,0,0,117,522,1,
  	0,0,0,119,524,1,0,0,0,121,527,1,0,0,0,123,529,1,0,0,0,125,532,1,0,0,0,
  	127,535,1,0,0,0,129,538,1,0,0,0,131,540,1,0,0,0,133,542,1,0,0,0,135,544,
  	1,0,0,0,137,546,1,0,0,0,139,549,1,0,0,0,141,552,1,0,0,0,143,555,1,0,0,
  	0,145,558,1,0,0,0,147,560,1,0,0,0,149,562,1,0,0,0,151,565,1,0,0,0,153,
  	567,1,0,0,0,155,570,1,0,0,0,157,572,1,0,0,0,159,160,5,97,0,0,160,161,
  	5,115,0,0,161,162,5,115,0,0,162,163,5,101,0,0,163,164,5,114,0,0,164,165,
  	5,116,0,0,165,166,5,32,0,0,166,167,5,112,0,0,167,168,5,114,0,0,168,169,
  	5,111,0,0,169,170,5,112,0,0,170,171,5,101,0,0,171,172,5,114,0,0,172,173,
  	5,116,0,0,173,174,5,121,0,0,174,2,1,0,0,0,175,176,5,64,0,0,176,177,5,
  	112,0,0,177,178,5,111,0,0,178,179,5,115,0,0,179,180,5,101,0,0,180,181,
  	5,100,0,0,181,182,5,103,0,0,182,183,5,101,0,0,183,4,1,0,0,0,184,185,5,
  	46,0,0,185,186,5,46,0,0,186,187,5,35,0,0,187,188,5,35,0,0,188,6,1,0,0,
  	0,189,190,5,46,0,0,190,191,5,46,0,0,191,192,5,35,0,0,192,8,1,0,0,0,193,
  	194,5,46,0,0,194,195,5,46,0,0,195,196,5,91,0,0,196,10,1,0,0,0,197,198,
  	5,93,0,0,198,199,5,64,0,0,199,12,1,0,0,0,200,201,5,80,0,0,201,202,3,91,
  	45,0,202,14,1,0,0,0,203,204,5,46,0,0,204,205,5,46,0,0,205,206,5,38,0,
  	0,206,207,5,38,0,0,207,208,5,46,0,0,208,209,5,46,0,0,209,16,1,0,0,0,210,
  	222,5,70,0,0,211,212,5,101,0,0,212,213,5,118,0,0,213,214,5,101,0,0,214,
  	215,5,110,0,0,215,216,5,116,0,0,216,217,5,117,0,0,217,218,5,97,0,0,218,
  	219,5,108,0,0,219,220,5,108,0,0,220,222,5,121,0,0,221,210,1,0,0,0,221,
  	211,1,0,0,0,222,18,1,0,0,0,223,231,5,71,0,0,224,225,5,97,0,0,225,226,
  	5,108,0,0,226,227,5,119,0,0,227,228,5,97,0,0,228,229,5,121,0,0,229,231,
  	5,115,0,0,230,223,1,0,0,0,230,224,1,0,0,0,231,20,1,0,0,0,232,246,5,88,
  	0,0,233,234,5,110,0,0,234,235,5,101,0,0,235,236,5,120,0,0,236,237,5,116,
  	0,0,237,238,5,116,0,0,238,239,5,105,0,0,239,240,5,109,0,0,240,246,5,101,
  	0,0,241,242,5,110,0,0,242,243,5,101,0,0,243,244,5,120,0,0,244,246,5,116,
  	0,0,245,232,1,0,0,0,245,233,1,0,0,0,245,241,1,0,0,0,246,22,1,0,0,0,247,
  	254,5,87,0,0,248,249,5,117,0,0,249,250,5,110,0,0,250,251,5,116,0,0,251,
  	252,5,105,0,0,252,254,5,108,0,0,253,247,1,0,0,0,253,248,1,0,0,0,254,24,
  	1,0,0,0,255,256,5,82,0,0,256,26,1,0,0,0,257,258,5,46,0,0,258,259,5,46,
  	0,0,259,28,1,0,0,0,260,261,5,61,0,0,261,262,5,62,0,0,262,30,1,0,0,0,263,
  	264,5,45,0,0,264,265,5,62,0,0,265,32,1,0,0,0,266,267,5,60,0,0,267,268,
  	5,45,0,0,268,269,5,62,0,0,269,34,1,0,0,0,270,271,5,124,0,0,271,272,5,
  	61,0,0,272,278,5,62,0,0,273,274,5,91,0,0,274,275,5,93,0,0,275,276,5,61,
  	0,0,276,278,5,62,0,0,277,270,1,0,0,0,277,273,1,0,0,0,278,36,1,0,0,0,279,
  	280,5,124,0,0,280,281,5,45,0,0,281,287,5,62,0,0,282,283,5,91,0,0,283,
  	284,5,93,0,0,284,285,5,45,0,0,285,287,5,62,0,0,286,279,1,0,0,0,286,282,
  	1,0,0,0,287,38,1,0,0,0,288,289,5,61,0,0,289,40,1,0,0,0,290,291,5,35,0,
  	0,291,292,5,35,0,0,292,42,1,0,0,0,293,294,5,59,0,0,294,44,1,0,0,0,295,
  	296,5,102,0,0,296,297,5,105,0,0,297,298,5,114,0,0,298,299,5,115,0,0,299,
  	300,5,116,0,0,300,301,5,95,0,0,301,302,5,109,0,0,302,303,5,97,0,0,303,
  	304,5,116,0,0,304,305,5,99,0,0,305,306,5,104,0,0,306,46,1,0,0,0,307,308,
  	5,110,0,0,308,309,5,111,0,0,309,310,5,116,0,0,310,48,1,0,0,0,311,312,
  	5,97,0,0,312,313,5,110,0,0,313,314,5,100,0,0,314,50,1,0,0,0,315,316,5,
  	105,0,0,316,317,5,110,0,0,317,318,5,116,0,0,318,319,5,101,0,0,319,320,
  	5,114,0,0,320,321,5,115,0,0,321,322,5,101,0,0,322,323,5,99,0,0,323,324,
  	5,116,0,0,324,52,1,0,0,0,325,326,5,111,0,0,326,327,5,114,0,0,327,54,1,
  	0,0,0,328,329,5,64,0,0,329,330,5,116,0,0,330,331,5,114,0,0,331,332,5,
  	117,0,0,332,340,5,101,0,0,333,334,5,64,0,0,334,335,5,102,0,0,335,336,
  	5,97,0,0,336,337,5,108,0,0,337,338,5,115,0,0,338,340,5,101,0,0,339,328,
  	1,0,0,0,339,333,1,0,0,0,340,56,1,0,0,0,341,342,3,105,52,0,342,343,3,83,
  	41,0,343,344,5,44,0,0,344,345,5,98,0,0,345,346,5,111,0,0,346,347,5,111,
  	0,0,347,348,5,108,0,0,348,349,1,0,0,0,349,350,3,107,53,0,350,58,1,0,0,
  	0,351,352,3,105,52,0,352,353,3,83,41,0,353,354,5,44,0,0,354,355,5,105,
  	0,0,355,356,5,110,0,0,356,357,5,116,0,0,357,358,1,0,0,0,358,359,3,107,
  	53,0,359,60,1,0,0,0,360,361,5,108,0,0,361,366,5,108,0,0,362,363,5,117,
  	0,0,363,364,5,108,0,0,364,366,5,108,0,0,365,360,1,0,0,0,365,362,1,0,0,
  	0,366,62,1,0,0,0,367,368,3,93,46,0,368,64,1,0,0,0,369,370,3,105,52,0,
  	370,371,3,83,41,0,371,372,5,44,0,0,372,373,5,102,0,0,373,374,5,108,0,
  	0,374,375,5,111,0,0,375,376,5,97,0,0,376,377,5,116,0,0,377,378,1,0,0,
  	0,378,379,3,107,53,0,379,66,1,0,0,0,380,381,5,123,0,0,381,68,1,0,0,0,
  	382,383,5,125,0,0,383,70,1,0,0,0,384,385,5,91,0,0,385,72,1,0,0,0,386,
  	387,5,93,0,0,387,74,1,0,0,0,388,389,5,40,0,0,389,76,1,0,0,0,390,391,5,
  	41,0,0,391,78,1,0,0,0,392,393,5,105,0,0,393,394,5,110,0,0,394,395,5,115,
  	0,0,395,396,5,105,0,0,396,397,5,100,0,0,397,398,5,101,0,0,398,80,1,0,
  	0,0,399,400,5,36,0,0,400,401,5,115,0,0,401,402,5,116,0,0,402,403,5,97,
  	0,0,403,404,5,98,0,0,404,405,5,108,0,0,405,422,5,101,0,0,406,407,5,36,
  	0,0,407,408,5,112,0,0,408,409,5,97,0,0,409,410,5,115,0,0,410,422,5,116,
  	0,0,411,412,5,36,0,0,412,413,5,114,0,0,413,414,5,111,0,0,414,415,5,115,
  	0,0,415,422,5,101,0,0,416,417,5,36,0,0,417,418,5,102,0,0,418,419,5,101,
  	0,0,419,420,5,108,0,0,420,422,5,108,0,0,421,399,1,0,0,0,421,406,1,0,0,
  	0,421,411,1,0,0,0,421,416,1,0,0,0,422,82,1,0,0,0,423,427,3,85,42,0,424,
  	426,3,87,43,0,425,424,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,
  	1,0,0,0,428,84,1,0,0,0,429,427,1,0,0,0,430,432,7,0,0,0,431,430,1,0,0,
  	0,432,86,1,0,0,0,433,435,7,1,0,0,434,433,1,0,0,0,435,88,1,0,0,0,436,438,
  	5,45,0,0,437,439,2,48,57,0,438,437,1,0,0,0,439,440,1,0,0,0,440,438,1,
  	0,0,0,440,441,1,0,0,0,441,90,1,0,0,0,442,444,2,48,57,0,443,442,1,0,0,
  	0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,92,1,0,0,0,447,
  	449,5,45,0,0,448,447,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,452,
  	2,48,57,0,451,450,1,0,0,0,452,453,1,0,0,0,453,451,1,0,0,0,453,454,1,0,
  	0,0,454,455,1,0,0,0,455,457,5,46,0,0,456,458,2,48,57,0,457,456,1,0,0,
  	0,458,459,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,472,1,0,0,0,461,
  	463,5,45,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,465,1,0,0,0,464,466,
  	2,48,57,0,465,464,1,0,0,0,466,467,1,0,0,0,467,465,1,0,0,0,467,468,1,0,
  	0,0,468,469,1,0,0,0,469,470,5,46,0,0,470,472,5,102,0,0,471,448,1,0,0,
  	0,471,462,1,0,0,0,472,94,1,0,0,0,473,474,5,48,0,0,474,475,5,98,0,0,475,
  	477,1,0,0,0,476,478,2,48,49,0,477,476,1,0,0,0,478,479,1,0,0,0,479,477,
  	1,0,0,0,479,480,1,0,0,0,480,96,1,0,0,0,481,482,5,48,0,0,482,483,5,120,
  	0,0,483,485,1,0,0,0,484,486,7,2,0,0,485,484,1,0,0,0,486,487,1,0,0,0,487,
  	485,1,0,0,0,487,488,1,0,0,0,488,498,1,0,0,0,489,490,5,48,0,0,490,491,
  	5,120,0,0,491,493,1,0,0,0,492,494,7,3,0,0,493,492,1,0,0,0,494,495,1,0,
  	0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,481,1,0,0,0,497,
  	489,1,0,0,0,498,98,1,0,0,0,499,500,3,103,51,0,500,501,3,101,50,0,501,
  	100,1,0,0,0,502,504,7,4,0,0,503,505,7,5,0,0,504,503,1,0,0,0,505,506,1,
  	0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,102,1,0,0,0,508,509,5,39,0,
  	0,509,104,1,0,0,0,510,511,5,171,0,0,511,106,1,0,0,0,512,513,5,187,0,0,
  	513,108,1,0,0,0,514,515,5,43,0,0,515,110,1,0,0,0,516,517,5,45,0,0,517,
  	112,1,0,0,0,518,519,5,42,0,0,519,114,1,0,0,0,520,521,5,47,0,0,521,116,
  	1,0,0,0,522,523,5,62,0,0,523,118,1,0,0,0,524,525,5,62,0,0,525,526,5,61,
  	0,0,526,120,1,0,0,0,527,528,5,60,0,0,528,122,1,0,0,0,529,530,5,60,0,0,
  	530,531,5,61,0,0,531,124,1,0,0,0,532,533,5,61,0,0,533,534,5,61,0,0,534,
  	126,1,0,0,0,535,536,5,33,0,0,536,537,5,61,0,0,537,128,1,0,0,0,538,539,
  	5,38,0,0,539,130,1,0,0,0,540,541,5,124,0,0,541,132,1,0,0,0,542,543,5,
  	94,0,0,543,134,1,0,0,0,544,545,5,126,0,0,545,136,1,0,0,0,546,547,5,60,
  	0,0,547,548,5,60,0,0,548,138,1,0,0,0,549,550,5,62,0,0,550,551,5,62,0,
  	0,551,140,1,0,0,0,552,553,5,38,0,0,553,554,5,38,0,0,554,142,1,0,0,0,555,
  	556,5,124,0,0,556,557,5,124,0,0,557,144,1,0,0,0,558,559,5,33,0,0,559,
  	146,1,0,0,0,560,561,5,58,0,0,561,148,1,0,0,0,562,563,5,58,0,0,563,564,
  	5,58,0,0,564,150,1,0,0,0,565,566,5,36,0,0,566,152,1,0,0,0,567,568,5,62,
  	0,0,568,569,5,60,0,0,569,154,1,0,0,0,570,571,7,6,0,0,571,156,1,0,0,0,
  	572,573,7,7,0,0,573,574,1,0,0,0,574,575,6,78,0,0,575,158,1,0,0,0,28,0,
  	221,230,245,253,277,286,339,365,421,427,431,434,440,445,448,453,459,462,
  	467,471,479,485,487,493,495,497,506,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  temporallexerLexerStaticData = staticData.release();
}

}

temporalLexer::temporalLexer(CharStream *input) : Lexer(input) {
  temporalLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *temporallexerLexerStaticData->atn, temporallexerLexerStaticData->decisionToDFA, temporallexerLexerStaticData->sharedContextCache);
}

temporalLexer::~temporalLexer() {
  delete _interpreter;
}

std::string temporalLexer::getGrammarFileName() const {
  return "temporal.g4";
}

const std::vector<std::string>& temporalLexer::getRuleNames() const {
  return temporallexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& temporalLexer::getChannelNames() const {
  return temporallexerLexerStaticData->channelNames;
}

const std::vector<std::string>& temporalLexer::getModeNames() const {
  return temporallexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& temporalLexer::getVocabulary() const {
  return temporallexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView temporalLexer::getSerializedATN() const {
  return temporallexerLexerStaticData->serializedATN;
}

const atn::ATN& temporalLexer::getATN() const {
  return *temporallexerLexerStaticData->atn;
}




void temporalLexer::initialize() {
  std::call_once(temporallexerLexerOnceFlag, temporallexerLexerInitialize);
}
